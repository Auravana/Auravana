@model Auravana.Domain.Entities.Person

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Welcome to Auravana</title>
    <link rel="stylesheet" href="~/Content/Styles/Style.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r71/three.min.js"></script>
    <script src="~/Scripts/jquery-2.1.3.min.js"></script>
</head>
<body>
    <div id="chat" class="container">
        <h2>Inter-Systems Communications Platform</h2>
        <div>
            <div id="chat_entry">
                <input type="text" id="message" />
                <input type="button" id="sendmessage" value="Send" />
            </div>
            <div id="discussion_border">
                <div id ="discussion">
                    <ul></ul>
                </div>                
            </div>            
        </div>
    </div>
    <div id="profile" class="container">
        <h2>User Profile</h2>
        <div id="profile_details">
            <img src="@Model.ImageUrl" width="100" alt="Profile Image" />
            <div>
                <label>User Name:</label>
                <span>@Model.Username</span>
            </div>
            <div>
                <label>First Name:</label>
                <span>@Model.FirstName</span>
            </div>
            <div>
                <label>Middle Name:</label>
                <span>@Model.MiddleName</span>
            </div>
            <div>
                <label>Surname Name:</label>
                <span>@Model.Surname</span>
            </div>
            <div>
                <label>Date of Birth:</label>
                <span>@string.Format("{0} ({1} years old)", Model.DateOfBirth.ToShortDateString(), (int)((DateTime.Now - Model.DateOfBirth).TotalDays) / 365)</span>
            </div>
        </div>
    </div>
    <div id="WebGL-output"></div>

    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
        $(function () {
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.chatHub;
            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (name, message) {
                // Add the message to the page.
                $('#discussion ul').append('<li><strong>' + htmlEncode(name)
                    + '</strong>: ' + htmlEncode(message) + '</li>');

                var discussion = $('#discussion');
                discussion.scrollTop = discussion.scrollHeight;
            };
            // Set initial focus to message input box.
            $('#message').focus();
            // Start the connection.
            $.connection.hub.start().done(function () {
                $('#chat').keypress(function (e) {
                    if (e.keyCode == 13) {
                        $('#sendmessage').click();
                    }
                });
                $('#sendmessage').click(function () {
                    // Call the Send method on the hub.
                    chat.server.send('@Model.Username', $('#message').val());
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                });
            });
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>

    <script>
        $(function () {
            var scene = new THREE.Scene();

            var camera = new THREE.PerspectiveCamera(
                45,
                window.innerWidth / window.innerHeight,
                0.1,
                1000);

            var renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setClearColor(0x000000, 1.0);
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.shadowMapEnabled = true;

            var axes = new THREE.AxisHelper(20);
            scene.add(axes);

            var planeGeometry = new THREE.PlaneGeometry(60, 20, 1, 1);
            var planeMaterial = new THREE.MeshLambertMaterial({ color: 0xcccccc });

            var plane = new THREE.Mesh(planeGeometry, planeMaterial);
            plane.rotation.x = -0.5 * Math.PI;
            plane.position.x = 15;
            plane.position.y = 0;
            plane.position.z = 0;
            plane.receiveShadow = true;

            scene.add(plane);

            var cubeGeometry = new THREE.CubeGeometry(4, 4, 4);
            var cubeMaterial = new THREE.MeshLambertMaterial({ color: 0xff0000 });

            var cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
            cube.position.x = -4;
            cube.position.y = 3;
            cube.position.z = 0;
            cube.castShadow = true;

            scene.add(cube);

            var sphereGeometry = new THREE.SphereGeometry(4, 20, 20);
            var sphereMaterial = new THREE.MeshLambertMaterial({ color: 0x7777ff });
            var sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);
            sphere.position.x = 20;
            sphere.position.y = 4;
            sphere.position.z = 2;
            sphere.castShadow = true;

            scene.add(sphere);

            var spotlight = new THREE.SpotLight(0xffffff);
            spotlight.position.set(-40, 60, -10);
            spotlight.castShadow = true;
            scene.add(spotlight);

            camera.position.x = -30;
            camera.position.y = 40;
            camera.position.z = 30;
            camera.lookAt(scene.position);

            $("#WebGL-output").append(renderer.domElement);

            var step = 0;

            renderScene();

            function renderScene() {

                step += 0.03;
                sphere.position.x = 20 + (10 * (Math.cos(step)));
                sphere.position.y = 2 + (10 * Math.abs(Math.sin(step)));

                cube.rotation.x += 0.02;
                cube.rotation.y += 0.02;
                cube.rotation.z += 0.02;

                requestAnimationFrame(renderScene);
                renderer.render(scene, camera);
            }
        });
    </script>

    

</body>
</html>
